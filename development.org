#+TITLE:  PureLisp development process
#+AUTHOR: Jakub Šťastný

* Bootstrapping
** Parser in Rust and Rust PEG

Produces AST, exports it into JSON.

#+BEGIN_SRC json
[
  {
    "op": "fn-call",
    "fn": "puts",
    "ar": ["Hello world!"]
  },
  {
    "op": "fn-call",
    "fn": "puts",
    "ar": ["Bye then!"]
  },
]
#+END_SRC

** Compiler

PureLisp compiles into WAT. Since WAT also uses S-expressions, it's very easy to take Lisp S-expressions and generate low-level WAT S-expressions.

WAT is then compiled to WASM using the WASM toolchain.

Dynamic features are implemented using PureLisp runtime, which is compiled into the final WASM module.

*** Dynamic compilation

Each project is compiled into (typically one) WASM module, which includes PureLisp runtime and the project itself.

Would we need to load say user-defined scripts at the run time, we need to do dynamic compilation: to compile the source to a new WASM module, which we can then load.

** [[file:mplisp/mplisp.org][MPureLisp]]